#!/bin/bash
#
# This script performs a full backup + LZMA compression of all Virtual Machines on a specific host
# it connects to KVM servers with SSH key authentication
# it lists the VMs and their attached storage
# 
#
# Version 0.1 - Jef Bucas 2013-03-21 
# Version 0.2 - Jef Bucas 2014-08-29 
# Version 0.3 - Jef Bucas 2014-09-11 

SCRIPTDIR="$(dirname "$0")"
cd "$SCRIPTDIR"

BACKUPDIR="$SCRIPTDIR"

# CMD
SSH="ssh -4 -c arcfour"
SSH_MULTIPLEX_TIMEOUT="10h"
PLZIP="plzip -3 -q -c -n"
PLDEZIP="plzip -q -c -d "
SUMCMD='sha256sum'

# PAD for device blocks
PAD="000000000"

# In Megabytes
SIZE="100"

# Local config
if [ -f "./config" ]; then
	. ./config
fi

# Get the hash length
HASHLENGTH="$(echo | $SUMCMD | tr -d " -" | wc -c )"
HASHLENGTH="$(($HASHLENGTH - 1 ))"

# Black listing specific devices
BLACK_LIST=""
if [ -f "./black_list" ]; then
	BLACK_LIST="$(cat black_list)"
fi

# Parameters
ALL_HOSTS=""
while [ -n "$1" ]; do
	case "$1" in
		"-g" | "--group" )
			list="$(eval echo \$group_$2)"
			if [ -z "$list" ]; then
				echo "Group $2 is not defined. Please look into your config file"
				exit 1
			fi
			ALL_HOSTS="$ALL_HOSTS ""$list"
			shift
			;;
		* )
			ALL_HOSTS="$ALL_HOSTS ""$1"
			;;
	esac
	shift
done

if [ -z "$ALL_HOSTS" ]; then
	echo "Please provide the list of KVM host on which to perform the backups"
	echo "Usage: $0 [--group name1] host1[:kvm] [host2:/dev/sda1] [...]"
	exit 1
fi


do_ssh_multiplex() {
	SSH_MULTIPLEX="$MACHINE/ssh_multiplex"
	# Establish multiplexing 
	$SSH -M -S $SSH_MULTIPLEX -f $MACHINE sleep $SSH_MULTIPLEX_TIMEOUT 2> /dev/null > /dev/null
	
	# |CPUs| -1 (to leave some room for the VMs
	NB_CORES="$($SSH -S $SSH_MULTIPLEX $MACHINE cat /proc/cpuinfo | grep processor | tail -1 | tr -d '[a-z: \t]')"
}

undo_ssh_multiplex() {
	if [ -e "$SSH_MULTIPLEX" ]; then
		# Stop SSH multiplexing
		$SSH -q -O stop -S $SSH_MULTIPLEX $MACHINE 2> /dev/null > /dev/null
	fi
}




# The backup itself
# This slices up the DEV in chunks of $SIZE and only zip+transfers if there's a difference with the last backup
do_bloinck_backup() {

	# Create destination directory
	TODAY="$(date +%Y-%m-%d__%H-%M-%S)"
	mkdir -p "$DESTBDEV/$TODAY"

	# First we build a local_cache file with all known hashes for the DEV
	find "$DESTBDEV" -type f -name "*.lzma" > "$DESTBDEV"/.local_cache

	# Get Empty checksum
	SUM_EMPTY="$($SSH -S $SSH_MULTIPLEX $MACHINE dd if=/dev/null 2\> /dev/null \| $SUMCMD | tr -d ' -')"
	# Get Zero checksum
	SUM_ZERO="$($SSH -S $SSH_MULTIPLEX $MACHINE dd if=/dev/zero bs="$SIZE""M" count=1 2\> /dev/null \| $SUMCMD | tr -d ' -')"

	# Setup RAM FS on the remote
	$SSH -S $SSH_MULTIPLEX $MACHINE "mkdir -p /tmp/bloinck; mount -t tmpfs -o size=$SIZE""M"" none /tmp/bloinck; touch /tmp/bloinck/data; chmod 600 /tmp/bloinck/data"


	CHUNK=0
	SUM=""
	while [ "$SUM" != "$SUM_EMPTY" ]; do

		CHUNK_PAD="${PAD:${#CHUNK}}""$CHUNK"

		SUM="$($SSH -S $SSH_MULTIPLEX $MACHINE dd status=noxfer if="$1" bs="$SIZE""M" count=1 skip="$CHUNK" 2\> /dev/null \| tee /tmp/bloinck/data | $SUMCMD | tr -d ' -')"
	
		if [ -n "$SUM" ]; then
			LZ="$DESTBDEV/$TODAY/$CHUNK_PAD""_""$SUM"".lzma"
			
			# Find if we already have a CHUNK matching this SUM -- hopefully there won't be any SUM collision
			# We search first in the machine's previous backups
			#LAST="$(find "$DESTBDEV" -type f -name "*$SUM"".lzma" | head -1)"
			LAST="$(grep "$SUM" "$DESTBDEV"/.local_cache | head -1)"
			if [ -z "$LAST" ]; then
				# if nothing is found, we look into the whole scope of all the backups
				#LAST="$(find . -type f -name "*$SUM"".lzma" | head -1)"
				LAST="$(grep "$SUM" .global_cache_uniq_hashes | head -1)"
				if [ -n "$LAST" ]; then
					LAST="$(grep "$SUM" .global_cache | head -1)"
				fi
			fi
			if [ -n "$LAST" ]; then

				if [ "$SUM" == "$SUM_ZERO" -o "$SUM" == "$SUM_EMPTY" ]; then
					# Copy the file to avoid over use of Hard Links in the zero case or the empty case
					cp "$LAST" "$LZ"
				else
					# Hard link if it is identical
					ln "$LAST" "$LZ"
				fi
			else
				# Transfer the new chunk
				$SSH -S $SSH_MULTIPLEX $MACHINE \
					dd status=noxfer if="/tmp/bloinck/data" bs="$SIZE""M" count=1 2\> /dev/null \|\
					nice -n 15 $PLZIP $NB_CORES |\
					dd status=noxfer of="$LZ"".tmp" bs=5M 2> /dev/null

				# We check what we transfered
				SUMTRANSFERED="$(dd status=noxfer if="$LZ"".tmp" 2> /dev/null | $PLDEZIP | $SUMCMD | tr -d ' -')"

				if [ "$SUM" == "$SUMTRANSFERED" ]; then
					mv "$LZ"".tmp" "$LZ"
				else
					mkdir -p "failed/"
					ln -s -f "$LZ"".tmp" "failed/"
				fi

				# TODO : add the new SUM and new file into the cache files
			fi
		else
			# If the MACHINE or $1 is not accessible, we end the loop
			SUM="$SUM_EMPTY"
		fi

		(( CHUNK ++ ))
	done

	# Un-Setup RAM fs on the remote
	$SSH -S $SSH_MULTIPLEX $MACHINE "umount /tmp/bloinck; rm -f /tmp/bloinck/data; rmdir /tmp/bloinck"
	
}




do_block_device() {

	if [ "$2" == "single_block" ]; then
		do_ssh_multiplex
	fi

	b=$1

	DESTMACHINE="$BACKUPDIR/"${MACHINE}"/"
	bdev="${b//\/dev\/}"
	DESTBDEV=$DESTMACHINE"${bdev//\//_}/"
	mkdir -p $DESTBDEV

	# Create a snapshot of the block device to avoid FS corruptions
	bsnapshot="$b-snapshot-$(date +%Y-%m-%d__%H-%M-%S)"
	LVCREATED="no"
	LVEXIST="$($SSH -S $SSH_MULTIPLEX $MACHINE which lvcreate)"
	if [ -n "$LVEXIST" ]; then
		$SSH -S $SSH_MULTIPLEX $MACHINE lvcreate -s -L10G -n $(basename $bsnapshot) $bdev > /dev/null
		LVCREATED="$?"
	fi
	
	# Perform a backup + LZMA compression on the remote host
	if [ "$LVCREATED" != "0" ]; then
		# backup of the live block device if for some reason the snapshot is not available
		do_bloinck_backup $b
	else
		# Backup of the snapshot
		do_bloinck_backup $bsnapshot

		# Remove the snapshot
		$SSH -S $SSH_MULTIPLEX $MACHINE lvremove -f $bsnapshot > /dev/null
	fi

	if [ "$2" == "single_block" ]; then
		undo_ssh_multiplex
	fi
}

do_virtual_machines() {

	do_ssh_multiplex

	# List virtual machines
	VM_LIST=$($SSH -S $SSH_MULTIPLEX $MACHINE virsh -q list | sed -e "s/[ 0-9]*\([^ ]*\) .*/\1/g")
	for v in $VM_LIST; do
		# List block devices used by virtual machine $v
		BLK_DEV=$($SSH -S $SSH_MULTIPLEX $MACHINE virsh domblklist $v | grep -v -- "^---\|^Target" | sed -e "s/.* \([^ ]*\)/\1/g" | grep -v -- "^-" )

		for blk in $BLK_DEV; do
			# Black list
			skip=""
			for black in $BLACK_LIST; do
				if [ -n "$(echo "$blk" | grep "$black" )" ]; then
					skip="YES"
				fi
			done
			[ -n "$skip" ] && continue

			do_block_device $blk

		done
	done

	undo_ssh_multiplex

}

# First we build a global_cache file with all known hashes
find -type f -name "*.lzma" > .global_cache

# And we list all the uniq hashes to speed up the search process
rev .global_cache | cut -c6-$((6 + $HASHLENGTH - 1)) | rev | sort -u > .global_cache_uniq_hashes


# Loop through all the hosts provided
for HOST in $ALL_HOSTS; do

	(

	MACHINE="${HOST%%:*}"
	MACHINEBLOCK="${HOST##*:}"

	ping -c 1 -W 2 -q $MACHINE > /dev/null 2>&1
	[ $? != 0 ] && echo "Skipping unpingable $MACHINE" && continue


	case $MACHINEBLOCK in
		"" | "$MACHINE" | "kvm" )
			do_virtual_machines
			;;

		* )
			do_block_device $MACHINEBLOCK single_block
			;;
	esac
	
	) &
done
	
