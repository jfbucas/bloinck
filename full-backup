#!/bin/bash
#
# This script performs a full backup + LZMA compression of all DIAS Virtual Machines
# it connects to KVM servers with SSH key authentication
# the keys on the remote hosts are propagated using Puppet
#
# Version 0.1 - Jef Bucas 2013-03-21 
# Version 0.2 - Jef Bucas 2014-08-29 

SCRIPTDIR="$(dirname "$0")"
cd "$SCRIPTDIR"

BRANCH_LIST=""
BLACK_LIST="$(cat black_list)"

SSH="ssh -4 -c arcfour"
PLZIP="plzip -3 -q -c -n"


# The backup itself:
do_full_backup() {
	echo -n "$1 : "
	$SSH $MACHINE dd status=noxfer if=$1 bs=50M \| nice -n 15 $PLZIP $NB_CORES | dd status=noxfer of="$DESTFILE" bs=50M
	date
}


# Do only branch specified as parameter
if [ -n "$@" ]; then
	BRANCH_LIST=$@
fi

date="$(date +%Y-%m-%d__%H-%M-%S)"

# Loop through all the KVM host for a branch of DIAS
for branch in $BRANCH_LIST; do
	for n in {1..9}; do

		(
		MACHINE="kvm$n.$branch.$DOMAIN"

		ping -c 1 -W 2 -q $MACHINE > /dev/null 2>&1
		[ $? != 0 ] && echo "Skipping unpingable $MACHINE" && continue


		# |CPUs| -1 (to leave some room for the VMs
		NB_CORES="$($SSH $MACHINE cat /proc/cpuinfo | grep processor | tail -1 | tr -d '[a-z: \t]')"

		# List virtual machines
		VM_LIST=$($SSH $MACHINE virsh -q list | sed -e "s/[ 0-9]*\([^ ]*\) .*/\1/g")
		for v in $VM_LIST; do
			# List block devices used by virtual machine $v
			BLK_DEV=$($SSH $MACHINE virsh domblklist $v | grep -v -- "^---\|^Target" | sed -e "s/.* \([^ ]*\)/\1/g" | grep -v -- "^-" )

			for b in $BLK_DEV; do
				skip=""
				for black in $BLACK_LIST; do
					if [ -n "$(echo "$b" | grep "$black" )" ]; then
						skip="YES"
					fi
				done

				[ -n "$skip" ] && continue

				DESTDIR="$SCRIPTDIR/"${MACHINE}"/"
				mkdir -p $DESTDIR

				bdev="${b//\/dev\/}"
				DESTFILE=$DESTDIR"${bdev//\//_}-$date.lzma"

				# Create a snapshot of the block device to avoid FS corruptions
				bsnapshot="$b-snapshot-$date"
				$SSH $MACHINE lvcreate -s -L10G -n $(basename $bsnapshot) $bdev
				
				# Perform a full backup + LZMA compression on the remote host
				if [ $? != 0 ]; then
					# backup of the live block device if for some reason the snapshot is not available
					do_full_backup $b
				else
					# Backup of the snapshot
					do_full_backup $bsnapshot

					# Remove the snapshot
					$SSH $MACHINE lvremove -f $bsnapshot
				fi
			done
		done
		) &
	done
done
	
